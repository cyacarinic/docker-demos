# -*- mode: ruby -*-
# vi: set ft=ruby :
VAGRANTFILE_API_VERSION = 2
# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "https://github.com/CommanderK5/packer-centos-template/releases/download/0.7.1/vagrant-centos-7.1.box"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.hostname = "Swarm-Agente-03"
  config.vm.network "forwarded_port", guest: 80, host: 83
  config.ssh.insert_key = false
  config.ssh.username = "vagrant"
  # config.vm.provider :virtualbox do |vb|
  #   vb.gui = true
  # end
  # config.vm.network :forwarded_port, host: 80, guest: 80
  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.103"
  # config.vm.post_up_message = "El ambiente local fue inicializado"
  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../code/", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    sudo yum -y whatprovides netstat
    sudo yum -y install net-tools
  SHELL
    # sudo usermod -aG docker vagrant

    # sudo yum update
    # curl -fsSL https://get.docker.com/ | sh
    # sudo service docker start
    # sudo usermod -aG docker vagrant

  # config.vm.provision "docker",
  #     images: ["httpd"]
  # config.vm.provision "docker" do |d|
  #   d.pull_images "httpd"
  #   d.run "httpd", args: "-p '80:80'"
    # d.expose ["80:80"]
    # d.remains_running = true
      # Pull the apache httpd container from the docker hub
      # d.image = "httpd"
      # Tell Docker to name the container 'apache'
      # d.name = "apache"
      # Assign ports 80 and 443 to the container
      # d.ports = ["80:80", "433:443"]
      # Make sure the container stays running when started
      # d.remains_running = true
    # d.build_dir = "."
  # end
  # config.vm.provision :docker
  # config.vm.provision :docker_compose, rebuild: true, run: "always", yml: "./docker-compose.yml"
end